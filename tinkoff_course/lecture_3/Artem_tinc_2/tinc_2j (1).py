# -*- coding: utf-8 -*-
"""tinc_2j.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NK4qmdnG3xHiZEoZRNbNNN5i3XHyKi2l
"""

''' b
str = input()
used_nums = set()
twice_nums = set()
ans = []
for char in str:
    if char.isdigit():
        if char in used_nums:
            twice_nums.add(char)
        used_nums.add(char)

if (len(twice_nums) != 0):
    for value in twice_nums:
        ans.append(value)
    ans.sort()
    print(' '.join(ans))
else:
    print("NO")
    '''

''' f
n = int(input())
languages = {}
for i in range(n):
    langs_amount = int(input())
    for j in range(langs_amount):
        temp_lang = input()
        if temp_lang not in languages:
            languages[temp_lang] = []

        languages[temp_lang].append(i)

everyone = []
for key in languages:
    if len(languages[key]) == n:
        everyone.append(key)
print(len(everyone))

for lang in everyone:
    print(lang)

print(len(languages))
for key in languages:
    print(key)
'''

n = int(input())
parents = {}
all_members = set()
for i in range(n - 1):
    kid, dad = input().split()
    if parents.get(dad) == None:
        parents[dad] = set()
    parents[dad].add(kid)
    all_members.add(dad)
    all_members.add(kid)
ans = []
grandparents = all_members.copy()
for children in parents.values():
    for child in children:
        grandparents.remove(child)

grandparent = grandparents.pop()
all_members.remove(grandparent)
count = 0
ans.append([grandparent, count])
grandparents.add(grandparent)
while (len(all_members) != 0):
    count += 1
    new_grandparentes = set()
    for dad in grandparents:
      if parents.get(dad) != None:
        for child in parents[dad]:
            ans.append([child, count])
            all_members.remove(child)
        new_grandparentes = new_grandparentes.union(parents[dad])
    grandparents = new_grandparentes.copy()

ans.sort()
for dad, high in ans:
    print(dad, high, sep=' ')

